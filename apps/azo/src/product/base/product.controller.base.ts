/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ProductService } from "../product.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ProductCreateInput } from "./ProductCreateInput";
import { Product } from "./Product";
import { ProductFindManyArgs } from "./ProductFindManyArgs";
import { ProductWhereUniqueInput } from "./ProductWhereUniqueInput";
import { ProductUpdateInput } from "./ProductUpdateInput";
import { DetailProductFindManyArgs } from "../../detailProduct/base/DetailProductFindManyArgs";
import { DetailProduct } from "../../detailProduct/base/DetailProduct";
import { DetailProductWhereUniqueInput } from "../../detailProduct/base/DetailProductWhereUniqueInput";
import { OrderDetailFindManyArgs } from "../../orderDetail/base/OrderDetailFindManyArgs";
import { OrderDetail } from "../../orderDetail/base/OrderDetail";
import { OrderDetailWhereUniqueInput } from "../../orderDetail/base/OrderDetailWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ProductControllerBase {
  constructor(
    protected readonly service: ProductService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Product })
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createProduct(
    @common.Body() data: ProductCreateInput
  ): Promise<Product> {
    return await this.service.createProduct({
      data: {
        ...data,

        service: data.service
          ? {
              connect: data.service,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        name: true,
        price: true,

        service: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Product] })
  @ApiNestedQuery(ProductFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async products(@common.Req() request: Request): Promise<Product[]> {
    const args = plainToClass(ProductFindManyArgs, request.query);
    return this.service.products({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        price: true,

        service: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Product })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async product(
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<Product | null> {
    const result = await this.service.product({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        price: true,

        service: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Product })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateProduct(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() data: ProductUpdateInput
  ): Promise<Product | null> {
    try {
      return await this.service.updateProduct({
        where: params,
        data: {
          ...data,

          service: data.service
            ? {
                connect: data.service,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          name: true,
          price: true,

          service: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Product })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteProduct(
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<Product | null> {
    try {
      return await this.service.deleteProduct({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          price: true,

          service: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/detailProducts")
  @ApiNestedQuery(DetailProductFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "DetailProduct",
    action: "read",
    possession: "any",
  })
  async findDetailProducts(
    @common.Req() request: Request,
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<DetailProduct[]> {
    const query = plainToClass(DetailProductFindManyArgs, request.query);
    const results = await this.service.findDetailProducts(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        feature: true,
        id: true,

        product: {
          select: {
            id: true,
          },
        },

        quantity: true,
        updatedAt: true,
        value: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/detailProducts")
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "update",
    possession: "any",
  })
  async connectDetailProducts(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: DetailProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      detailProducts: {
        connect: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/detailProducts")
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "update",
    possession: "any",
  })
  async updateDetailProducts(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: DetailProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      detailProducts: {
        set: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/detailProducts")
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "update",
    possession: "any",
  })
  async disconnectDetailProducts(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: DetailProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      detailProducts: {
        disconnect: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/orderDetails")
  @ApiNestedQuery(OrderDetailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "OrderDetail",
    action: "read",
    possession: "any",
  })
  async findOrderDetails(
    @common.Req() request: Request,
    @common.Param() params: ProductWhereUniqueInput
  ): Promise<OrderDetail[]> {
    const query = plainToClass(OrderDetailFindManyArgs, request.query);
    const results = await this.service.findOrderDetails(params.id, {
      ...query,
      select: {
        createdAt: true,
        discount: true,
        id: true,

        order: {
          select: {
            id: true,
          },
        },

        price: true,

        product: {
          select: {
            id: true,
          },
        },

        quantity: true,
        total: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/orderDetails")
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "update",
    possession: "any",
  })
  async connectOrderDetails(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: OrderDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderDetails: {
        connect: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/orderDetails")
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "update",
    possession: "any",
  })
  async updateOrderDetails(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: OrderDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderDetails: {
        set: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/orderDetails")
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "update",
    possession: "any",
  })
  async disconnectOrderDetails(
    @common.Param() params: ProductWhereUniqueInput,
    @common.Body() body: OrderDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderDetails: {
        disconnect: body,
      },
    };
    await this.service.updateProduct({
      where: params,
      data,
      select: { id: true },
    });
  }
}
