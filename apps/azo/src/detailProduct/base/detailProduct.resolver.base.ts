/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { DetailProduct } from "./DetailProduct";
import { DetailProductCountArgs } from "./DetailProductCountArgs";
import { DetailProductFindManyArgs } from "./DetailProductFindManyArgs";
import { DetailProductFindUniqueArgs } from "./DetailProductFindUniqueArgs";
import { CreateDetailProductArgs } from "./CreateDetailProductArgs";
import { UpdateDetailProductArgs } from "./UpdateDetailProductArgs";
import { DeleteDetailProductArgs } from "./DeleteDetailProductArgs";
import { Product } from "../../product/base/Product";
import { DetailProductService } from "../detailProduct.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DetailProduct)
export class DetailProductResolverBase {
  constructor(
    protected readonly service: DetailProductService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DetailProduct",
    action: "read",
    possession: "any",
  })
  async _detailProductsMeta(
    @graphql.Args() args: DetailProductCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DetailProduct])
  @nestAccessControl.UseRoles({
    resource: "DetailProduct",
    action: "read",
    possession: "any",
  })
  async detailProducts(
    @graphql.Args() args: DetailProductFindManyArgs
  ): Promise<DetailProduct[]> {
    return this.service.detailProducts(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DetailProduct, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DetailProduct",
    action: "read",
    possession: "own",
  })
  async detailProduct(
    @graphql.Args() args: DetailProductFindUniqueArgs
  ): Promise<DetailProduct | null> {
    const result = await this.service.detailProduct(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DetailProduct)
  @nestAccessControl.UseRoles({
    resource: "DetailProduct",
    action: "create",
    possession: "any",
  })
  async createDetailProduct(
    @graphql.Args() args: CreateDetailProductArgs
  ): Promise<DetailProduct> {
    return await this.service.createDetailProduct({
      ...args,
      data: {
        ...args.data,

        product: args.data.product
          ? {
              connect: args.data.product,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DetailProduct)
  @nestAccessControl.UseRoles({
    resource: "DetailProduct",
    action: "update",
    possession: "any",
  })
  async updateDetailProduct(
    @graphql.Args() args: UpdateDetailProductArgs
  ): Promise<DetailProduct | null> {
    try {
      return await this.service.updateDetailProduct({
        ...args,
        data: {
          ...args.data,

          product: args.data.product
            ? {
                connect: args.data.product,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DetailProduct)
  @nestAccessControl.UseRoles({
    resource: "DetailProduct",
    action: "delete",
    possession: "any",
  })
  async deleteDetailProduct(
    @graphql.Args() args: DeleteDetailProductArgs
  ): Promise<DetailProduct | null> {
    try {
      return await this.service.deleteDetailProduct(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Product, {
    nullable: true,
    name: "product",
  })
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async getProduct(
    @graphql.Parent() parent: DetailProduct
  ): Promise<Product | null> {
    const result = await this.service.getProduct(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
